{
  "Stateless Function Component": {
    "prefix": "sfc",
    "body": [
      "const $1 = ($2) => {",
      "\treturn $0",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Stateless Function Component"
  },

  "componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "\t$0", "}"],
    "description": "componentDidMount"
  },

  "componentWillMount": {
    "prefix": "cwm",
    "body": ["componentWillMount() {", "\t$0", "}"],
    "description": "componentWillMount"
  },

  "componentWillReceiveProps": {
    "prefix": "cwrp",
    "body": ["componentWillReceiveProps(nextProps) {", "\t$0", "}"],
    "description": "componentWillReceiveProps"
  },

  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$0", "}"],
    "description": "shouldComponentUpdate"
  },

  "componentWillUpdate": {
    "prefix": "cwu",
    "body": ["componentWillUpdate(nextProps, nextState) {", "\t$0", "}"],
    "description": "componentWillUpdate"
  },

  "componentDidUpdate": {
    "prefix": "cdu",
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}"],
    "description": "componentDidUpdate"
  },

  "componentWillUnmount": {
    "prefix": "cwun",
    "body": ["componentWillUnmount() {", "\t$0", "}"],
    "description": "componentWillUnmount"
  },

  "componentDidCatch": {
    "prefix": "cdc",
    "body": ["componentDidCatch(error, info) {", "\t$0", "}"],
    "description": "componentDidCatch"
  },

  "setState": {
    "prefix": "ss",
    "body": ["this.setState({ $1: $2 });"],
    "description": "setState"
  },

  "render": {
    "prefix": "rn-render",
    "body": ["render() {", "\treturn (", "\t\t $0", "\t)", "}"],
    "description": "render"
  },

  "Higher Order Component": {
    "prefix": "rn-higher-order-component",
    "body": [
      "function $1($2) {",
      "\treturn class extends Component {",
      "\t\tconstructor(props) {",
      "\t\t\tsuper(props);",
      "\t\t}",
      " ",
      "\t\trender() {",
      "\t\t\treturn <$2 {...this.props} $0/>",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Higher Order Component"
  },
  "React_PureComponent": {
    "prefix": "rn-pure-component",
    "body": [
      "import React from \"react\";",
      "import PropTypes from \"prop-types\";",
      "",
      "class ${TM_FILENAME_BASE} extends React.PureComponent {",
      "  constructor(props) {",
      "    super(props);",
      "\t\tthis.state = { $2 }",
      "  }",
      "",
      "  render() {",
      "    return <div />;",
      "  };",
      "};",
      "",
      "${TM_FILENAME_BASE}.propTypes = {};",
      "",
      "${TM_FILENAME_BASE}.defaultProps = {};",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "React component scaffold"
  },
  "React_Stateless_Component": {
    "prefix": "rn-stateless-functional-component",
    "body": [
      "import React from \"react\";",
      "import PropTypes from \"prop-types\";",
      "",
      "const ${TM_FILENAME_BASE} = props => {",
      "  return(<div />);",
      "};",
      "",
      "${TM_FILENAME_BASE}.propTypes = {};",
      "",
      "${TM_FILENAME_BASE}.defaultProps = {};",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "React component scaffold"
  },
  "Create a duck": {
    "prefix": "rn-duck",
    "description": "Create an entire redux flow, with ducks concept",
    "body": [
      "// Actions",
      "const ${1:ActionName} = '${2:Resource}/$1';",
      "\n// Reducer",
      "export default function reducer(state = {}, action) {",
      "\tswitch (action.type) {",
      "\t\tcase $1:",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\t...action.payload",
      "\t\t\t};",
      "\t\tdefault: return state;",
      "\t}",
      "}",
      "\n// Action Creators",
      "export function ${3:ActionCreator}() {",
      "\t$0",
      "};"
    ]
  },
  "Create a React Native component": {
    "prefix": "rn-natve-component",
    "description": "A React Native component",
    "body": [
      "import React, { Component } from 'react';",
      "import { Text, StyleSheet, View } from 'react-native';",
      "\nexport default class $1 extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<View>",
      "\t\t\t\t<Text>$0</Text>",
      "\t\t\t</View>",
      "\t\t);",
      "\t}",
      "}",
      "\nconst styles = StyleSheet.flatten({});"
    ]
  },
  "Create an simple action": {
    "prefix": "rn-action",
    "description": "Create an action, returning an object",
    "body": [
      "import { $2 } from './types';",
      "\nexport const $1 = () => {",
      "\treturn {",
      "\t\tpayload: {$0},",
      "\t\ttype: $2",
      "\t};",
      "};"
    ]
  },
  "Create an thunk action": {
    "prefix": "rn-thunk",
    "description": "Create a thunk action, returning a function",
    "body": [
      "import { $2 } from './types';",
      "\nexport const $1 = () => {",
      "\treturn (dispatch) => {",
      "\t\tdispatch({",
      "\t\t\tpayload: $0,",
      "\t\t\ttype: $2,",
      "\t\t});",
      "\t};",
      "};"
    ]
  },
  "Create a reducer": {
    "prefix": "rn-reducer",
    "description": "Create a simple reducer",
    "body": [
      "import { ${1:Action} } from '${2:Directory}';",
      "\nconst INITIAL_STATE = {};",
      "\n/**",
      "* @param {Object} state - Default application state",
      "* @param {Object} action - Action from action creator",
      "* @returns {Object} New state",
      "*/",
      "export default (state = INITIAL_STATE, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase $1:",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\t...action.payload",
      "\t\t\t};",
      "\t\tdefault: return state;",
      "\t}",
      "};$0"
    ]
  },
  "Component Will Mount": {
    "prefix": "rn-will-mount",
    "description": "ComponentWillMount Lifecycle",
    "body": ["componentWillMount() {", "\t$0", "}"]
  },
  "Component Did Mount": {
    "prefix": "rn-did-mount",
    "description": "ComponentDidMount Lifecycle",
    "body": ["componentDidMount() {", "\t$0", "}"]
  },
  "Component Will Update": {
    "prefix": "rn-will-update",
    "description": "ComponentWillUpdate Lifecycle",
    "body": ["componentWillUpdate(nextProps, nextState) {", "\t$0", "}"]
  },
  "Component Did Update": {
    "prefix": "rn-did-update",
    "description": "ComponentDidUpdate Lifecycle",
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}"]
  },
  "Component Will Receive Props": {
    "prefix": "rn-will-receive-props",
    "description": "ComponentWillReceiveProps Lifecycle",
    "body": ["componentWillReceiveProps(nextProps) {", "\t$0", "}"]
  },
  "Component Will Unmount": {
    "prefix": "rn-will-unmount",
    "description": "ComponentWillUnmount Lifecycle",
    "body": ["componentWillUnmount() {", "\t$0", "}"]
  },
  "Should Component Update": {
    "prefix": "rn-should-update",
    "description": "ShouldComponentUpdate Lifecycle",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$0", "}"]
  },
  "PropType": {
    "prefix": "rn-prp",
    "description": "PropType declaration",
    "body": "PropTypes.$0"
  },
  "Required PropType": {
    "prefix": "rn-prpr",
    "description": "Required PropType declaration",
    "body": "PropTypes.${1:type}.isRequired$0"
  },
  "Map state to props": {
    "prefix": "rn-map-state-to-prop",
    "description": "A function that returns an object",
    "body": "const mapStateToProps = ({ $1 }) => ({ $1 });$0"
  },
  "Map dispatch to props": {
    "prefix": "rn-map-dispatch-to-prop",
    "description": "A variable that returns an object",
    "body": "const mapDispatchToProps = { ${1:Action} };$0"
  },
  "Import React": {
    "prefix": "rn-imr",
    "body": ["import React from 'react';"],
    "description": "Import React"
  },

  "Import React, { Component }": {
    "prefix": "rn-imrc",
    "body": ["import React, { Component } from 'react';"],
    "description": "Import React, { Component }"
  },

  "Import PropTypes": {
    "prefix": "rn-impt",
    "body": ["import PropTypes from 'prop-types';"],
    "description": "Import PropTypes"
  },

  "Class Component": {
    "prefix": "cc",
    "body": [
      "class $1 extends Component {",
      "\tstate = {$2}",
      "\trender() { ",
      "\t\treturn ( $0 )",
      "\t}",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Class Component"
  },

  "Class Component With State": {
    "prefix": "rn-class-component-with-state",
    "body": [
      "class $1 extends Component {",
      "\tconstructor(props) {",
      "\t\tsuper(props);",
      "\t\tthis.state = { $2 }",
      "\t}",
      "\trender() { ",
      "\t\treturn ( $0 )",
      "\t}",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Class Component With State"
  },

  "Stateless Function Component": {
    "prefix": "sfc",
    "body": [
      "const $1 = ($2) => {",
      "\treturn $0",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Stateless Function Component"
  },

  "componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "\t$0", "}"],
    "description": "componentDidMount"
  },

  "componentWillMount": {
    "prefix": "cwm",
    "body": ["componentWillMount() {", "\t$0", "}"],
    "description": "componentWillMount"
  },

  "componentWillReceiveProps": {
    "prefix": "cwrp",
    "body": ["componentWillReceiveProps(nextProps) {", "\t$0", "}"],
    "description": "componentWillReceiveProps"
  },

  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$0", "}"],
    "description": "shouldComponentUpdate"
  },

  "componentWillUpdate": {
    "prefix": "cwu",
    "body": ["componentWillUpdate(nextProps, nextState) {", "\t$0", "}"],
    "description": "componentWillUpdate"
  },

  "componentDidUpdate": {
    "prefix": "cdu",
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}"],
    "description": "componentDidUpdate"
  },

  "componentWillUnmount": {
    "prefix": "cwun",
    "body": ["componentWillUnmount() {", "\t$0", "}"],
    "description": "componentWillUnmount"
  },

  "componentDidCatch": {
    "prefix": "cdc",
    "body": ["componentDidCatch(error, info) {", "\t$0", "}"],
    "description": "componentDidCatch"
  },

  "setState": {
    "prefix": "ss",
    "body": ["this.setState({ $1: $2 });"],
    "description": "setState"
  },

  "render": {
    "prefix": "rn-render",
    "body": ["render() {", "\treturn (", "\t\t $0", "\t)", "}"],
    "description": "render"
  }
}
